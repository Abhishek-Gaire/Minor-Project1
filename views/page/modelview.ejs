<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>3D Model of the Car</title>
    <link rel="stylesheet" href="/public/css/modelview.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@500&display=swap" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="/assets/logo-removebg-preview.png">

  </head>
  <body>
    <div class="view_back_b">
      <a href="">Back</a>
    </div>
    <div class="overlay_b">
      <div class="left_b">
        <a href="/">Back</a>
        <button id="view_car">Next</button>
      </div>

      <div class="middle_b">
        <h2><%= models.name %></h2>
        <p><%= models.description %></p>
      </div>
      <div class="model">

      </div>
      <div class="right_b">
        <p id="view_b">Perspective View</p>
         <% if(isLoggedIn)  { %>
          <a href="/book-car?<%=models._id%>" id="buy_b">Book Car</a>
        <% } else{ %>
          <a href="/login" id="buy_b">Login</a>
        <%} %>
      </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"
    integrity="sha512-16esztaSRplJROstbIIdwX3N97V1+pZvV33ABoG1H2OyTttBxEGkTsoIVsiP1iaTtM8b3+hu2kB6pQ4Clr5yug=="
    crossorigin="anonymous" referrerpolicy="no-referrer">
    </script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
    integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>


  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/loaders/GLTFLoader.js"></script>
  <script>
    const modelPath = "<%= models.modelUrl %>";
    console.log(modelPath)
    const overlay_b = document.querySelector('.view_back_b')
    const viewCar = document.querySelector('#view_car')
    const perspective =  document.getElementById('view_b')
    const overlay = document.querySelector('.overlay_b')
    perspective.addEventListener('click',()=>{
      console.log('works')
      overlay.style.visibility =  'hidden'
      overlay_b.style.visibility = 'visible'
    })
    const sizes = {
      width: window.innerWidth,
      height: window.innerHeight
    }
    // Setup scene
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(70, sizes.width / sizes.height, 0.1, 1000)
    // camera.position.set(1, 1.5, 4);
    // camera.position.x= 0.4
    camera.position.y = 1.1
    // camera.position.z= -1
    const renderer = new THREE.WebGLRenderer({ antialis: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    renderer.setClearColor(0xffffff)
    renderer.shadowMap.enabled = true
    document.body.appendChild(renderer.domElement);


    const alight = new THREE.AmbientLight(0xffffff,2)
    // scene.add(alight)

    const light = new THREE.DirectionalLight(0xffffff, 3 );
    light.position.set(-3, 4, 1);
    scene.add(light);
    // const light2 = new THREE.DirectionalLight(0xffffff, 1 );
    // light.position.set(3, 4, 1);
    // scene.add(light2);

    let controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true
    controls.target.set(0, 0.75, 0)
    // console.log(OrbitControls)
    
    window.addEventListener('resize', () => {
      // Update sizes
      sizes.width = window.innerWidth
      sizes.height = window.innerHeight
      
      // Update camera
      camera.aspect = sizes.width / sizes.height
      camera.updateProjectionMatrix()
      
      // Update renderer
      renderer.setSize(sizes.width, sizes.height)
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    })
    
    
    let position = 0
    
    // Load the car model
    const loader = new THREE.GLTFLoader();
    // const loader = new GLTFLoader();
    loader.load('./assets/CarGLBModel/bmw_e92.glb', function (gltf) {
      let carModel = gltf.scene;
      carModel.rotation.x = Math.PI * 0.08;
      carModel.rotation.y = Math.PI * 0.2;
      scene.add(carModel);
      
      viewCar.addEventListener('mouseup', () => {
        switch(position){
          case 0 :
            moveCamera(-0.5,0.7,4.2)
            rotateModel(0.3,Math.PI * -0.28,0)
            position = 1
            console.log('works')
            break;
          }
          // gsap.to(camera.position,1,{
            //   x : -0.5,
            //   y : 0.7,
            //   z : 4.2 
            // },"anim")
            // gsap.to(carModel.rotation,1,{
              //   // x:0.3,
              //   y : Math.PI * -0.28
              // },"anim")
              
              
              function moveCamera(x,y,z){
                gsap.to(camera.position,1,{
              x,
              y,
              z
            },"anim")
          }

          function rotateModel(x,y,z){
            gsap.to(carModel.rotation,1,{
              x,
              y,
              z
            },"anim")
          }
        })
      console.log('working')
    });
    // let controls = new THREE.OrbitControls(camera,renderer.domElement)
    
    // Position the camera
    camera.position.z = 5;
    
    // Render loop
    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();
    </script>
  </body>
</html>
